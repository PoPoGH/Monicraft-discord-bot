/**
 * Commande pour mettre un serveur Minecraft en mode maintenance
 */

const { SlashCommandBuilder, ChannelType, PermissionFlagsBits } = require('discord.js');
const db = require('../database');
const config = require('../config.json');
const { createAnnouncementEmbed } = require('../utils/embeds');

module.exports = {
    // D√©finition de la commande
    data: new SlashCommandBuilder()
        .setName('maintenance_serveur')
        .setDescription('Met un serveur Minecraft en mode maintenance pour mise √† jour du modpack')
        .addStringOption(option => 
            option.setName('nom')
                .setDescription('Nom du serveur √† mettre en maintenance')
                .setRequired(true)
                .setAutocomplete(true))
        .addBooleanOption(option => 
            option.setName('activer')
                .setDescription('Activer (true) ou d√©sactiver (false) le mode maintenance')
                .setRequired(true))
        .addStringOption(option => 
            option.setName('raison')
                .setDescription('Raison de la maintenance (ex: mise √† jour du modpack)')
                .setRequired(false))
        .addChannelOption(option => 
            option.setName('salon_annonce')
                .setDescription('Salon o√π envoyer l\'annonce de maintenance')
                .addChannelTypes(ChannelType.GuildText)
                .setRequired(false)),
    
    // Gestion de l'autocompl√©tion
    async autocomplete(interaction) {
        const focusedValue = interaction.options.getFocused();
        const servers = db.getAllServers();
        const choices = servers.map(server => server.name);
        
        const filtered = choices.filter(choice => 
            choice.toLowerCase().includes(focusedValue.toLowerCase())
        );
        
        await interaction.respond(
            filtered.map(choice => ({ name: choice, value: choice }))
        );
    },
    
    // Ex√©cution de la commande
    async execute(interaction) {
        // V√©rifier si l'utilisateur est autoris√© √† utiliser cette commande
        const userId = interaction.user.id;
        if (!config.adminIds.includes(userId)) {
            return interaction.reply({
                content: '‚õî Vous n\'√™tes pas autoris√© √† utiliser cette commande.',
                ephemeral: true
            });
        }

        await interaction.deferReply();

        try {
            // R√©cup√©rer les options
            const serverName = interaction.options.getString('nom');
            const activateMaintenance = interaction.options.getBoolean('activer');
            const reason = interaction.options.getString('raison') || 'Maintenance du serveur';
            const announcementChannel = interaction.options.getChannel('salon_annonce') || interaction.channel;
            
            // R√©cup√©rer le serveur depuis la base de donn√©es
            const server = db.getServerByName(serverName);
            if (!server) {
                return interaction.editReply(`‚ùå Le serveur "${serverName}" n'existe pas dans la base de donn√©es.`);
            }
            
            // V√©rifier les permissions dans le salon d'annonce
            const permissions = announcementChannel.permissionsFor(interaction.client.user);
            if (!permissions.has(PermissionFlagsBits.SendMessages) || 
                !permissions.has(PermissionFlagsBits.ViewChannel) || 
                !permissions.has(PermissionFlagsBits.EmbedLinks)) {
                return interaction.editReply(`‚ùå Je n'ai pas les permissions n√©cessaires dans le salon ${announcementChannel}.`);
            }
            
            // Mettre √† jour le statut du serveur
            const newStatus = activateMaintenance ? 'maintenance' : 'offline';
            db.updateServerStatus(server.id, newStatus);
            
            // Cr√©er et envoyer l'annonce
            let title, description, color;
            
            if (activateMaintenance) {
                title = `üîß Maintenance du serveur "${serverName}"`;
                description = `@everyone\n\nLe serveur **${serverName}** est actuellement en maintenance.\n\n**Raison :** ${reason}\n\nNous vous informerons d√®s que le serveur sera de nouveau disponible.`;
                color = '#f39c12'; // Orange pour la maintenance
            } else {
                title = `‚úÖ Fin de maintenance du serveur "${serverName}"`;
                description = `@everyone\n\nLa maintenance du serveur **${serverName}** est termin√©e.\n\nLe serveur est maintenant disponible !`;
                color = '#2ecc71'; // Vert pour la fin de maintenance
            }
            
            const embed = createAnnouncementEmbed(title, description, color);
            
            // Envoyer l'annonce dans le salon sp√©cifi√©
            await announcementChannel.send({ 
                content: '@everyone',
                embeds: [embed],
                allowedMentions: { parse: ['everyone'] }
            });
            
            // Message de confirmation diff√©rent selon que l'annonce a √©t√© envoy√©e dans le m√™me salon ou un autre
            const sameChannel = announcementChannel.id === interaction.channel.id;
            return interaction.editReply({
                content: `‚úÖ **Le serveur "${serverName}" a √©t√© ${activateMaintenance ? 'mis en' : 'retir√© du'} mode maintenance avec succ√®s !**\n` +
                        `üì£ Une annonce a √©t√© publi√©e ${sameChannel ? 'dans ce salon' : `dans le salon ${announcementChannel}`}.`
            });
        } catch (error) {
            console.error('Erreur lors de l\'ex√©cution de la commande maintenance_serveur:', error);
            return interaction.editReply('‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande.');
        }
    }
};
